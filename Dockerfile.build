# Multi-stage Dockerfile for building with database dependency
FROM node:20-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat postgresql-client
WORKDIR /app

# Install dependencies based on the preferred package manager
COPY package.json pnpm-lock.yaml* ./
RUN npm install -g pnpm && pnpm install --frozen-lockfile

# Wait for database stage
FROM base AS wait-for-db
RUN apk add --no-cache postgresql-client bash
WORKDIR /app

# Copy wait script
COPY scripts/wait-for-postgres.sh /usr/local/bin/wait-for-postgres.sh
RUN chmod +x /usr/local/bin/wait-for-postgres.sh

# Build stage with database dependency
FROM base AS builder
RUN apk add --no-cache libc6-compat postgresql-client bash
WORKDIR /app

# Copy dependencies
COPY --from=deps /app/node_modules ./node_modules
COPY --from=wait-for-db /usr/local/bin/wait-for-postgres.sh /usr/local/bin/wait-for-postgres.sh

# Copy source code
COPY . .

# Generate Payload types and import map
RUN npm install -g pnpm

# Build script that waits for database
COPY scripts/build-with-db-docker.sh /usr/local/bin/build-with-db.sh
RUN chmod +x /usr/local/bin/build-with-db.sh

# Set the build command
CMD ["/usr/local/bin/build-with-db.sh"]

# Production image (same as original)
FROM base AS runner
WORKDIR /app

ENV NODE_ENV production
ENV NEXT_TELEMETRY_DISABLED 1

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy the public folder
COPY --from=builder /app/public ./public

# Set the correct permission for prerender cache
RUN mkdir .next
RUN chown nextjs:nodejs .next

# Automatically leverage output traces to reduce image size
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

USER nextjs

EXPOSE 3000

ENV PORT 3000
ENV HOSTNAME "0.0.0.0"

CMD ["node", "server.js"]
