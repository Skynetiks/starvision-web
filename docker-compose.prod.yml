services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: starvision-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-starvision}
      POSTGRES_USER: ${POSTGRES_USER:-starvision_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - starvision-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-starvision_user} -d ${POSTGRES_DB:-starvision}",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Application
  app:
    image: starvision-app:latest
    container_name: starvision-app-prod
    environment:
      - NODE_ENV=production
      - DATABASE_URI=postgresql://${POSTGRES_USER:-starvision_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-starvision}
      - PAYLOAD_SECRET=${PAYLOAD_SECRET}
      - NEXT_PUBLIC_SERVER_URL=${NEXT_PUBLIC_SERVER_URL}
    env_file:
      - .env.production
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - starvision-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local

networks:
  starvision-network:
    driver: bridge
